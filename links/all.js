document.addEventListener('DOMContentLoaded', function() {

const whoSpan = document.querySelector('.who span');
    const texts = ["–ø–∏—Ä–∞—Ç üè¥‚Äç‚ò†Ô∏è","–æ—Ç–∞–∫—É üáØüáµ","–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üó∫Ô∏è", "–ø—Ä–æ–≤–∏–¥–µ—Ü üî≠", "–º–µ—á—Ç–∞—Ç–µ–ª—å üåå", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–µ—Ü üåç", "–∏—Å–∫–∞—Ç–µ–ª—å üî¨", "–æ—Ç–∫—Ä—ã–≤–∞—Ç–µ–ª—å –º–∏—Ä–æ–≤ üåè", "–∞—Å—Ç—Ä–æ–Ω–æ–º üå†", "—Ñ–∏–ª–æ—Å–æ—Ñ üìö", "–ø–∞–ª–µ–æ–Ω—Ç–æ–ª–æ–≥ ü¶ï", "–∞—Ä—Ö–µ–æ–ª–æ–≥ üîç", "–ø—Ä–∏—Ä–æ–¥–æ–≤–µ–¥ üåø", "–∫–æ—Å–º–æ–Ω–∞–≤—Ç üë®‚ÄçüöÄ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ üì∑", "–∏—Å—Ç–æ—Ä–∏–∫ üèõÔ∏è", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è≥", "–º–æ—Ä–µ–ø–ª–∞–≤–∞—Ç–µ–ª—å üö¢", "–∑–æ–æ–ª–æ–≥ ü¶ì", "–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç üèïÔ∏è", "–ø–∏—Å–∞—Ç–µ–ª—å üìù", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ —Å–Ω–∞—Ö üí≠", "–∞–ª—å–ø–∏–Ω–∏—Å—Ç üßó‚Äç‚ôÇÔ∏è", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –æ–∫–µ–∞–Ω–æ–≤ üåä", "–≥–µ–æ–≥—Ä–∞—Ñ üó∫Ô∏è", "—à—Ç–æ—Ä–º–æ—Ö–æ–¥–µ—Ü ‚öì", "–≤–æ–ª—å–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫ üé®", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ‚åõ", "—É—á—ë–Ω—ã–π üß™", "–ª—ë—Ç—á–∏–∫ ‚úàÔ∏è", "–º–æ—Ä—Å–∫–æ–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ü¶à", "—É—á–µ–Ω—ã–π-–±–∏–æ–ª–æ–≥ üß¨", "—Å–∫–∞–∑–æ—á–Ω–∏–∫ üìñ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å–∫–≤–æ–∑—å –∏–∑–º–µ—Ä–µ–Ω–∏—è üîÆ", "–≥–µ–æ–ª–æ–≥ üèîÔ∏è", "–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å –∫–æ—Å–º–æ—Å–∞ üöÄ", "—Ñ—É—Ç—É—Ä–∏—Å—Ç üöÄ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –º–µ–∂–¥—É –∑–≤–µ–∑–¥–∞–º–∏ üå†", "–º–µ—Ç–µ–æ—Ä–æ–ª–æ–≥ üå¶Ô∏è", "–¥—Ä—É–≥–∏–µ –º–∏—Ä—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å ü™ê", "—Ä–æ–±–∏–Ω–∑–æ–Ω üèùÔ∏è", "–º–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üåå", "–¥–µ—Ç–µ–∫—Ç–∏–≤ üîç", "–ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üè¥‚Äç‚ò†Ô∏è", "–∫–∞—Ä—Ç–æ–≥—Ä–∞—Ñ üó∫Ô∏è", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å—Ä–µ–¥–∏ –∑–∞–±—ã—Ç—ã—Ö —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–π üóø", "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π –Ω–æ–º–∞–¥ üöÄ", "–≤—Å–µ–ª–µ–Ω—Å–∫–∏–π —Å—Ç—Ä–∞–Ω–Ω–∏–∫ üåå", "—à–∞–º–∞–Ω—Å–∫–∏–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üîÆ", "–∫–∞–ø–∏—Ç–∞–Ω –∫–æ—Å–º–∏—á–µ—Å–∫–æ–≥–æ –∫–æ—Ä–∞–±–ª—è üöÄ", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ —Å—Ä–µ–¥–∏ –∑–≤—ë–∑–¥ üåü", "–±–ª—É–∂–¥–∞—é—â–∏–π –¥—É—Ö üåå", "–∞–≤–∞–Ω—Ç—é—Ä–∏—Å—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–∏ ‚è∞", "–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ –ø–æ –º–∏—Ä—É —Å–Ω–æ–≤ üåå", "—Ñ–∏–ª–æ—Å–æ—Ñ-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫ üåå", "—Ä—ã—Ü–∞—Ä—å –¥–∞–ª—ë–∫–∏—Ö –∑–µ–º–µ–ª—å üõ°Ô∏è", "—Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏—Å–∫–∞—Ç–µ–ª—å üïµÔ∏è‚Äç‚ôÇÔ∏è"];

let currentIndex = 0;
let nextWhoSpan = null;

function changeText() {
  if (nextWhoSpan === null) {
    nextWhoSpan = document.createElement('span');
    whoSpan.parentNode.insertBefore(nextWhoSpan, whoSpan.nextSibling);
    nextWhoSpan.style.opacity = '0';
  }

  nextWhoSpan.textContent = texts[currentIndex];
  currentIndex = (currentIndex + 1) % texts.length;

  // Fade out the current text
  whoSpan.style.transition = 'opacity 0.5s';
  whoSpan.style.opacity = '0';

  // Fade in the next text
  nextWhoSpan.style.transition = 'opacity 0.5s';
  nextWhoSpan.style.opacity = '1';

  // Swap the variables for the next iteration
  [whoSpan, nextWhoSpan] = [nextWhoSpan, whoSpan];
}

// Start the text changing loop
setInterval(changeText, 1200);


// -------------------------


   function showDateTime() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');

            const dateString = `${day}.${month}.${year}`;
            const timeString = `${hours}:${minutes}:${seconds}`;

            document.getElementById('date').innerText = dateString;
            document.getElementById('time').innerText = timeString;
        }

        
        setInterval(showDateTime, 1000);


// -------------------------

  function getIpAddress() {
            fetch('https://api.ipify.org?format=json')
                .then(response => response.json())
                .then(data => {
                    const ipAddress = data.ip;
                    document.getElementById('ip-address').innerText = ipAddress;
                })
                .catch(error => {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞:', error);
                    document.getElementById('ip-address').innerText = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IP-–∞–¥—Ä–µ—Å';
                });
        }

        getIpAddress();


// -------------------------

         anime({
                targets: '#fuji path',
                strokeDashoffset: [anime.setDashoffset, 0],
                easing: 'easeInOutSine',
                duration: 3000,
                delay: function(el, i) {
                 return i * 250
                },
                direction: 'alternate',
                loop: true
               });

});
